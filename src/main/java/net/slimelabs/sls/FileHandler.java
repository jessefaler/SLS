package net.slimelabs.sls;

import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import java.util.Map;

import org.yaml.snakeyaml.Yaml;

public class FileHandler {

    String PATH_TO_SLS_FOLDER = "./plugins/sls";

    String PATH_TO_JAVA_VERSIONS_FOLDER = "./plugins/sls/java_versions";
    String PATH_TO_CONFIGS_FOLDER = "./plugins/sls/configs";

    String PATH_TO_MINIGAMES_CONFIG_FILE = "./plugins/sls/configs/minigames.yml";
    String PATH_TO_ARCHIVE_CONFIG_FILE = "./plugins/sls/configs/archive.yml";
    String PATH_TO_ADVENTURE_MAPS_CONFIG_FILE = "./plugins/sls/configs/adventureMaps.yml";

    String PATH_TO_MINIGAMES_FOLDER = "./plugins/sls/minigames";
    String PATH_TO_ARCHIVES_FOLDER = "./plugins/sls/archives";
    String PATH_TO_ADVENTURE_MAPS_FOLDER = "./plugins/sls/adventure_maps";

    public FileHandler() {
        //create Files/Folders if they don't exist
        createSLSPluginFolderIfNotExists();
        createConfigsFolderIfNotExists();
        createJavaVersionsFolderIfNotExists();

        //world folders
        createMinigamesFolderIfNotExists();
        createArchivesFolderIfNotExists();
        createAdventureMapsFolderIfNotExists();

        //config files
        createMinigamesConfigFileIfNotExists();
        createTheArchiveConfigFileIfNotExists();
        createAdventureMapsConfigFileIfNotExists();

        //read the configs file;
        addMinigamesToRegistryFromConfigFile();
        addArchivesToRegistryFromConfigFile();
        addAdventureMapsToRegistryFromConfigFile();
    }

    //reads the config file, deletes the current minigame registry and replaces it with the new one we just read in.
    public void reloadMinigamesConfig() {
        SLS.MINIGAME_REGISTRY.purgeRegistry();
        addMinigamesToRegistryFromConfigFile();
    }

    public void reloadArchivesConfig() {
        SLS.ARCHIVE_REGISTRY.purgeRegistry();
        addArchivesToRegistryFromConfigFile();
    }

    public void reloadAdventureMapsConfig() {
        SLS.ADVENTURE_REGISTRY.purgeRegistry();
        addAdventureMapsToRegistryFromConfigFile();
    }

    //Uses A Map generated by the readYamlFile() to add minigames to the minigame registry
    @SuppressWarnings("unchecked")
    public void addMinigamesToRegistryFromConfigFile() {
        Map<String, Object> data = readMinigamesYaml();
        assert data != null;
        List<Map<String, Object>> minigamesList = (List<Map<String, Object>>) data.get("minigames");
        for (Map<String, Object> minigame : minigamesList) {
            String name = minigame.get("name").toString().toLowerCase().trim();
            String authors = (String) minigame.get("authors");
            int maxPlayers = (int) minigame.get("max-players");
            int minPlayers = (int) minigame.get("min-players");
            String ram = (String) minigame.get("ram-allocation");
            boolean reset = (boolean) minigame.get("reset-world");
            String path = (String) minigame.get("server-folder-path");
            String description = (String) minigame.get("description");
            boolean useCustomJavaVersion = (boolean) minigame.get("use-custom-java-version");
            String customJavaVersionPath = (String) minigame.get("custom-java-version-path");
            int ramInMB = convertToMegabytes(ram);
            if(ramInMB == -1) {
                SLS.LOGGER.error("[SLS] YAML Read Error: Incorrect RAM format in minigames config file. At minigame \""
                        + name + "\" Received: \"" + ram + "\" Example Formatting: \"2gb\", \"1000mb\", \"5000kb\"");
                continue;
            }
            SLS.MINIGAME_REGISTRY.addMinigame(name, authors, minPlayers, maxPlayers, ramInMB, reset, useCustomJavaVersion, customJavaVersionPath, path, description);
        }
    }

    //Uses A Map generated by the readYamlFile() to add Archives to the Archives registry
    @SuppressWarnings("unchecked")
    public void addArchivesToRegistryFromConfigFile() {
        Map<String, Object> data = readArchivesYaml();
        assert data != null;
        List<Map<String, Object>> archivesList = (List<Map<String, Object>>) data.get("archives");
        for (Map<String, Object> archive : archivesList) {
            String name = archive.get("name").toString().toLowerCase().trim();
            String ram = (String) archive.get("ram-allocation");
            boolean reset = (boolean) archive.get("reset-world");
            String path = (String) archive.get("server-folder-path");
            boolean useCustomJavaVersion = (boolean) archive.get("use-custom-java-version");
            String customJavaVersionPath = (String) archive.get("custom-java-version-path");
            int ramInMB = convertToMegabytes(ram);
            if(ramInMB == -1) {
                SLS.LOGGER.error("[SLS] YAML Read Error: Incorrect RAM format in Archives config file. At Archive \""
                        + name + "\" Received: \"" + ram + "\" Example Formatting: \"2gb\", \"1000mb\", \"5000kb\"");
                continue;
            }
            SLS.ARCHIVE_REGISTRY.addArchive(name, ramInMB, reset, useCustomJavaVersion, customJavaVersionPath, path);
        }
    }

    //Uses A Map generated by the readYamlFile() to add Adventure Maps to the Adventure Map registry
    @SuppressWarnings("unchecked")
    public void addAdventureMapsToRegistryFromConfigFile() {
        Map<String, Object> data = readAdventureMapsYaml();
        assert data != null;
        List<Map<String, Object>> AdventureMapsList = (List<Map<String, Object>>) data.get("AdventureMaps");
        for (Map<String, Object> adventureMap : AdventureMapsList) {
            String name = adventureMap.get("name").toString().toLowerCase().trim();
            String authors = (String) adventureMap.get("authors");
            int maxPlayers = (int) adventureMap.get("max-players");
            int minPlayers = (int) adventureMap.get("min-players");
            String ram = (String) adventureMap.get("ram-allocation");
            boolean reset = (boolean) adventureMap.get("reset-world");
            String path = (String) adventureMap.get("server-folder-path");
            String description = (String) adventureMap.get("description");
            boolean useCustomJavaVersion = (boolean) adventureMap.get("use-custom-java-version");
            String customJavaVersionPath = (String) adventureMap.get("custom-java-version-path");
            int ramInMB = convertToMegabytes(ram);
            if(ramInMB == -1) {
                SLS.LOGGER.error("[SLS] YAML Read Error: Incorrect RAM format in Adventure Maps config file. At Adventure Map \""
                        + name + "\" Received: \"" + ram + "\" Example Formatting: \"2gb\", \"1000mb\", \"5000kb\"");
                continue;
            }
            SLS.ADVENTURE_REGISTRY.addAdventure(name, authors, minPlayers, maxPlayers, ramInMB, reset, useCustomJavaVersion, customJavaVersionPath, path, description);
        }
    }

    //reads the Minigames Config File. Uses the snake YAML Library to read the YAML file into a Map.
         private Map<String, Object> readMinigamesYaml() {
             try (InputStream input = new FileInputStream(PATH_TO_MINIGAMES_CONFIG_FILE)) {
                 Yaml yaml = new Yaml();
                 return yaml.load(input);
             } catch (Exception e) {
                 SLS.LOGGER.error("[SLS] YAML Read Error: " + e.getMessage());
                 return null;
             }
         }

    //reads the Archive Config File. Uses the snake YAML Library to read the YAML file into a Map.
    private Map<String, Object> readArchivesYaml() {
        try (InputStream input = new FileInputStream(PATH_TO_ARCHIVE_CONFIG_FILE)) {
            Yaml yaml = new Yaml();
            return yaml.load(input);
        } catch (Exception e) {
            SLS.LOGGER.error("[SLS] YAML Read Error: " + e.getMessage());
            return null;
        }
    }

    //reads the adventureMaps Config File. Uses the snake YAML Library to read the YAML file into a Map.
    private Map<String, Object> readAdventureMapsYaml() {
        try (InputStream input = new FileInputStream(PATH_TO_ADVENTURE_MAPS_CONFIG_FILE)) {
            Yaml yaml = new Yaml();
            return yaml.load(input);
        } catch (Exception e) {
            SLS.LOGGER.error("[SLS] YAML Read Error: " + e.getMessage());
            return null;
        }
    }

    //converts a ram amount to an integer representing mb
    public static int convertToMegabytes(String input) {
        // Convert the input string to lowercase for case-insensitive matching
        String lowercaseInput = input.toLowerCase();

        // Check if the input matches the expected format
        if (!lowercaseInput.matches("\\d+[gmk]b")) {
            return -1;
        }

        // Extract the numeric part of the input
        int numericValue = Integer.parseInt(lowercaseInput.replaceAll("[^0-9]", ""));

        // Determine the unit (GB, MB, KB) and convert to MB
        if (lowercaseInput.contains("gb")) {
            numericValue *= 1024; // 1 GB = 1024 MB
        } else if (lowercaseInput.contains("kb")) {
            numericValue /= 1024; // 1 KB = 1/1024 MB
        }

        return numericValue;
    }

    /* --------------The Below Methods Handle File/Folder Creation If The File Or Folder Do Not Exist--------------
     *
     * File To Create: minigames.yml (minigames config file)
     * Folder To Create: minigames (holders all the minigame server files)
     * Folder To Create: SLS (Main plugin Folder holds the Minigames Folder and the Minigames.yml file)
     *
     */


    // creates the main folder for the sls plugin
    // located in ./plugins/sls
    public void createSLSPluginFolderIfNotExists() {
        File file = new File(PATH_TO_SLS_FOLDER);
        if (!file.exists()) {
            boolean success = file.mkdir();
            if(!success) {
                SLS.LOGGER.error("§c[SLS] ERROR: Failed To Create SLS Folder");//Send Message To Console If Failed To create New File
            }
        }
    }

    // creates the minigames folder if it doesn't already exist
    // located in ./plugins/sls/minigames
    public void createConfigsFolderIfNotExists() {
        File file = new File(PATH_TO_CONFIGS_FOLDER);
        if (!file.exists()) {
            boolean success = file.mkdir();
            if(!success) {
                SLS.LOGGER.error("§c[SLS] ERROR: Failed To Create Minigames Folder");//Send Message To Console If Failed To create New File
            }
        }
    }

    // creates the java versions folder if it doesn't already exist
    // located in ./plugins/sls/java_versions
    public void createJavaVersionsFolderIfNotExists() {
        File file = new File(PATH_TO_JAVA_VERSIONS_FOLDER);
        if (!file.exists()) {
            boolean success = file.mkdir();
            if(!success) {
                SLS.LOGGER.error("§c[SLS] ERROR: Failed To Create Java Versions Folder");//Send Message To Console If Failed To create New File
            }
        }
    }

    // creates the minigames folder if it doesn't already exist
    // located in ./plugins/sls/minigames
    public void createMinigamesFolderIfNotExists() {
        File file = new File(PATH_TO_MINIGAMES_FOLDER);
        if (!file.exists()) {
            boolean success = file.mkdir();
            if(!success) {
                SLS.LOGGER.error("§c[SLS] ERROR: Failed To Create Minigames Folder");//Send Message To Console If Failed To create New File
            }
        }
    }

    // creates the archives folder if it doesn't already exist
    // located in ./plugins/sls/archives
    public void createArchivesFolderIfNotExists() {
        File file = new File(PATH_TO_ARCHIVES_FOLDER);
        if (!file.exists()) {
            boolean success = file.mkdir();
            if(!success) {
                SLS.LOGGER.error("§c[SLS] ERROR: Failed To Create Minigames Folder");//Send Message To Console If Failed To create New File
            }
        }
    }

    // creates the adventure maps folder if it doesn't already exist
    // located in ./plugins/sls/adventure_maps
    public void createAdventureMapsFolderIfNotExists() {
        File file = new File(PATH_TO_ADVENTURE_MAPS_FOLDER);
        if (!file.exists()) {
            boolean success = file.mkdir();
            if(!success) {
                SLS.LOGGER.error("§c[SLS] ERROR: Failed To Create Minigames Folder");//Send Message To Console If Failed To create New File
            }
        }
    }

    // creates the minigames configuration file if it doesn't already exist
    // located in ./plugins/sls/minigames.yml
    public void createMinigamesConfigFileIfNotExists() {
        File file = new File(PATH_TO_MINIGAMES_CONFIG_FILE);
        if (!file.exists()) {
            try (InputStream source = getClass().getClassLoader().getResourceAsStream("minigames.yml")) {
                if (source == null) {
                    throw new IOException("Resource minigames.yml not found");
                }
                Path destination = Paths.get(PATH_TO_CONFIGS_FOLDER, "minigames.yml");

                Files.copy(source, destination);
            } catch (IOException e) {
                SLS.LOGGER.error("[SLS] File Copy Error: " + e.getMessage());
            }
        }
    }

    // creates the adventure maps configuration file if it doesn't already exist
    // located in ./plugins/sls/adventureMaps.yml
    public void createAdventureMapsConfigFileIfNotExists() {
        File file = new File(PATH_TO_ADVENTURE_MAPS_CONFIG_FILE);
        if (!file.exists()) {
            try (InputStream source = getClass().getClassLoader().getResourceAsStream("adventureMaps.yml")) {
                if (source == null) {
                    throw new IOException("Resource adventureMaps.yml not found");
                }
                Path destination = Paths.get(PATH_TO_CONFIGS_FOLDER, "adventureMaps.yml");

                Files.copy(source, destination);
            } catch (IOException e) {
                SLS.LOGGER.error("[SLS] File Copy Error: " + e.getMessage());
            }
        }
    }

    // creates the archives configuration file if it doesn't already exist
    // located in ./plugins/sls/archive.yml
    public void createTheArchiveConfigFileIfNotExists() {
        File file = new File(PATH_TO_ARCHIVE_CONFIG_FILE);
        if (!file.exists()) {
            try (InputStream source = getClass().getClassLoader().getResourceAsStream("archive.yml")) {
                if (source == null) {
                    throw new IOException("Resource archive.yml not found");
                }
                Path destination = Paths.get(PATH_TO_CONFIGS_FOLDER, "archive.yml");

                Files.copy(source, destination);
            } catch (IOException e) {
                SLS.LOGGER.error("[SLS] File Copy Error: " + e.getMessage());
            }
        }
    }
}
